<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/mvc"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context" xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.0.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd">
	<!-- 关键是applicationContext.xml和 and spring-servlet.xml中定义的bean是在不同的container中存在的，彼此不能直接访问。 -->
	<context:property-placeholder location="classpath:config/*.properties"
		ignore-unresolvable="true" />

	<!-- DispatcherServlet Context: defines this servlet's request-processing 
		infrastructure -->

	<!-- Enables the Spring MVC @Controller programming model -->
	<annotation-driven />

	<!-- Handles HTTP GET requests for /resources/** by efficiently serving 
		up static resources in the ${webappRoot}/resources directory -->
	<resources mapping="/resources/**" location="/resources/" />

	<!-- Resolves views selected for rendering by @Controllers to .jsp resources 
		in the /WEB-INF/views directory -->
	<beans:bean
		class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<beans:property name="prefix" value="/WEB-INF/views/" />
		<beans:property name="suffix" value=".jsp" />
	</beans:bean>

	<beans:bean id="localeResolver"
		class="org.springframework.web.servlet.i18n.FixedLocaleResolver">
		<beans:property name="defaultLocale" value="${default.locale}"></beans:property>
	</beans:bean>

	<context:component-scan base-package="com.piggsoft.pigg" />

	<beans:bean id="messageSource"
		class="org.springframework.context.support.ResourceBundleMessageSource">
		<beans:property name="basenames">
			<beans:list>
				<!-- <beans:value>config/error</beans:value> -->
				<beans:value>i18n.label</beans:value>
				<beans:value>i18n.message</beans:value>
				<beans:value>i18n.error</beans:value>
			</beans:list>
		</beans:property>
	</beans:bean>
	<!-- 使用SimpleMappingExceptionResolver实现异常处理,出去ajax请求 -->
	<beans:bean
		class="com.piggsoft.pigg.web.exception.CustomSimpleMappingExceptionResolver">
		<beans:property name="exceptionMappings">
			<beans:props>
				<!-- <beans:prop key="NumberFormatException">number</beans:prop> --><!-- 表示当抛出NumberFormatException的时候就返回名叫number的视图 -->
				<!-- <beans:prop key="NullPointerException">error/404</beans:prop> -->
				<beans:prop key="AuthenticationException">login</beans:prop>
			</beans:props>
		</beans:property>
		<beans:property name="defaultErrorView" value="error/500" /><!-- 
			表示当抛出异常但没有在exceptionMappings里面找到对应的异常时 返回名叫error/500的视图 -->
		<beans:property name="statusCodes"><!-- 定义在发生异常时视图跟返回码的对应关系 -->
			<beans:props>
				<beans:prop key="number">500</beans:prop><!-- 表示在发生NumberFormatException时返回视图number，然后这里定义发生异常时视图number对应的HttpServletResponse的返回码是500 -->
				<beans:prop key="error/500">500</beans:prop>
				<beans:prop key="login">403</beans:prop>
			</beans:props>
		</beans:property>
		<beans:property name="defaultStatusCode" value="404" /><!-- 
			表示在发生异常时默认的HttpServletResponse的返回码是多少，默认是200 -->
	</beans:bean>

	<tx:annotation-driven transaction-manager="transactionManager" />
	<interceptors>
		<beans:bean
			class="com.piggsoft.pigg.web.spring.intercepter.ExecuteTimeInterceptor"></beans:bean>
		<interceptor>
			<mapping path="/**" />
			<exclude-mapping path="/login/**" />
			<exclude-mapping path="/register/**" />
			<exclude-mapping path="/resources/**" />
			<exclude-mapping path="/bill/**" />
			<beans:bean
				class="com.piggsoft.pigg.web.spring.intercepter.SystemInterceptor"></beans:bean>
		</interceptor>
	</interceptors>
	<!-- 定义ApplicationListener分发时的taskExecutor -->
	<beans:bean id="taskExecutor"
		class="org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor">
	</beans:bean>
	<!-- 重新定义ApplicationListener分发时的taskExecutor，默认是同步执行 -->
	<beans:bean id="applicationEventMulticaster"
		class="org.springframework.context.event.SimpleApplicationEventMulticaster">
		<beans:property name="taskExecutor" ref="taskExecutor"></beans:property>
	</beans:bean>

	<beans:bean id="validator"
		class="org.springframework.validation.beanvalidation.LocalValidatorFactoryBean">
		<!-- 自定义eorror message资源 -->
		<!-- <beans:property name="validationMessageSource" ref="messageSource"></beans:property> -->
	</beans:bean>
</beans:beans>
