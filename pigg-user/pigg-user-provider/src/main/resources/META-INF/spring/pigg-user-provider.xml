<?xml version="1.0" encoding="UTF-8"?>
<!--
 - Copyright 1999-2011 Alibaba Group.
 -  
 - Licensed under the Apache License, Version 2.0 (the "License");
 - you may not use this file except in compliance with the License.
 - You may obtain a copy of the License at
 -  
 -      http://www.apache.org/licenses/LICENSE-2.0
 -  
 - Unless required by applicable law or agreed to in writing, software
 - distributed under the License is distributed on an "AS IS" BASIS,
 - WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 - See the License for the specific language governing permissions and
 - limitations under the License.
-->
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:dubbo="http://code.alibabatech.com/schema/dubbo"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.1.xsd
		http://code.alibabatech.com/schema/dubbo http://code.alibabatech.com/schema/dubbo/dubbo.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.5.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.2.xsd">

    <dubbo:application name="pigg-user-provider" owner="programmer" organization="piggsoft"/>

    <dubbo:registry address="zookeeper://127.0.0.1:2181"/>

    <!--uncomment this if you want to test dubbo's monitor-->
    <!--<dubbo:monitor protocol="registry"/>-->

    <dubbo:protocol name="dubbo" serialization="kryo" optimizer="com.piggsoft.pigg.user.utils.SerializationOptimizerImpl"/>
    
    <dubbo:service interface="com.piggsoft.pigg.user.service.UserService" ref="userService" protocol="dubbo"></dubbo:service>
	
	<bean id="userService" class="com.piggsoft.pigg.user.service.impl.UserServiceImpl"></bean>
	
	
	<context:property-placeholder location="classpath:config/config.properties" ignore-unresolvable="true"/>
	<context:property-placeholder location="classpath:config/jdbc.properties" ignore-unresolvable="true" />
	
	<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource"
		init-method="init" destroy-method="close">
		<!-- 基本属性 url、user、password -->
		<property name="url" value="${connection.url}" />
		<property name="username" value="${connection.username}" />
		<property name="password" value="${connection.password}" />

		<!-- 配置初始化大小、最小、最大 -->
		<property name="initialSize" value="${connection.initialPoolSize}" />
		<property name="minIdle" value="${connection.minPoolSize}" />
		<property name="maxActive" value="${connection.maxPoolSize}" />

		<!-- 配置获取连接等待超时的时间 -->
		<property name="maxWait" value="60000" />

		<!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
		<property name="timeBetweenEvictionRunsMillis" value="60000" />

		<!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
		<property name="minEvictableIdleTimeMillis" value="300000" />

		<property name="validationQuery" value="SELECT 'x'" />
		<property name="testWhileIdle" value="true" />
		<property name="testOnBorrow" value="false" />
		<property name="testOnReturn" value="false" />

		<!-- 配置监控统计拦截的filters com.alibaba.druid.filter.stat.StatFilter stat 监控统计，通过StatFilter能够统计每个SQL的执行情况，包括执行时间等 
			com.alibaba.dragoon.patrol.web.PatrolWebJdbcStatFilter webstat 这个是阿里巴巴Dragoon系统的filter，监控每个URL请求的JDBC访问情况 
			現在的JAR版本不支持。 com.alibaba.druid.wall.WallFilter wall 这个是防御SQL注入的Filter。WallFilter是在Druid 
			0.2以上版本才提供 -->
		<property name="filters" value="stat" />
	</bean>

	<bean id="druid-stat-interceptor"
		class="com.alibaba.druid.support.spring.stat.DruidStatInterceptor">
	</bean>

	<bean id="druid-stat-pointcut" class="org.springframework.aop.support.JdkRegexpMethodPointcut"
		scope="prototype">
		<property name="patterns">
			<list>
				<value>com.**.service.*</value>
			</list>
		</property>
	</bean>

	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="configLocation" value="${mybatis.configLocation}" />
		<property name="mapperLocations" value="${mybatis.mapperLocations}" />
		<property name="typeAliasesPackage" value="${mybatis.typeAliasesPackage}" />
	</bean>

	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.piggsoft.pigg.user.dao" />
	</bean>
	
	<bean id="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>
	
	<aop:aspectj-autoproxy/>
</beans>